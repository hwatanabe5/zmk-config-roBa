#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// スクロール量定義

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    hold-while-undecided;
};

&lt { hold-while-undecided; };

//AML誤爆防止・復帰除外キー設定

&zip_temp_layer {
    require-prior-idle-ms = <100>;
    excluded-positions = <
        18 // J
        19 // K
        20 // L
       // 17 //
       //  28 //
       //  29 //
       //  30 //
       //  37 // 左下左
       //  38 // 左下中
           39 // 左下右
    >;
};

//トラックボール操作時AML動作定義

&trackball_listener { input-processors = <&zip_temp_layer 4 3000>; };

//マウスクリック操作時AML動作定義

&mkp_input_listener { input-processors = <&zip_temp_layer 4 500>; };

&trackball {
    //  automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        F7_ {
            bindings = <&kp F7>;
            key-positions = <38 22>;
        };

        F8_ {
            bindings = <&kp F8>;
            key-positions = <38 23>;
        };

        F9_ {
            bindings = <&kp F9>;
            key-positions = <38 24>;
        };

        F10_ {
            bindings = <&kp F10>;
            key-positions = <38 25>;
        };

        F6_ {
            bindings = <&kp F6>;
            key-positions = <38 12>;
        };

        F5_ {
            bindings = <&kp F5>;
            key-positions = <38 11>;
        };

        F4_ {
            bindings = <&kp F4>;
            key-positions = <38 10>;
        };

        F3_ {
            bindings = <&kp F3>;
            key-positions = <38 2>;
        };

        F2_ {
            bindings = <&kp F2>;
            key-positions = <38 1>;
        };

        F1_ {
            bindings = <&kp F1>;
            key-positions = <38 0>;
        };

        F11_ {
            bindings = <&kp F11>;
            key-positions = <38 13>;
        };

        F12_ {
            bindings = <&kp F12>;
            key-positions = <38 3>;
        };

        EQ_ {
            bindings = <&kp JP_EQUAL>;
            key-positions = <2 3>;
        };

        KAKKO1 {
            bindings = <&kp JP_LPAR>;
            key-positions = <3 4>;
        };

        KAKKO2 {
            bindings = <&kp JP_RPAR>;
            key-positions = <5 6>;
        };

        KAKKO3 {
            bindings = <&kp JP_LBKT>;
            key-positions = <13 14>;
        };

        KAKKO4 {
            bindings = <&kp JP_RBKT>;
            key-positions = <17 18>;
        };

        KAKKO5 {
            bindings = <&kp JP_LT>;
            key-positions = <25 26>;
        };

        KAKKO6 {
            bindings = <&kp JP_RT>;
            key-positions = <29 30>;
        };

        EXCL_ {
            bindings = <&kp JP_EXCL>;
            key-positions = <6 7>;
        };

        QMARK_ {
            bindings = <&kp JP_QMARK>;
            key-positions = <2 3>;
        };

        AT_ {
            bindings = <&kp JP_AT>;
            key-positions = <30 31>;
        };

        ASTRK_ {
            bindings = <&kp JP_ASTRK>;
            key-positions = <7 8>;
        };

        COLON_ {
            bindings = <&kp JP_COLON>;
            key-positions = <23 24>;
        };

        SEMI_ {
            bindings = <&kp JP_SEMI>;
            key-positions = <31 32>;
        };

        MB1_ {
            bindings = <&mkp MB1>;
            key-positions = <19 18>;
        };

        MB2_ {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        ESC_ {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        BS_ {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
        };

        DEL_ {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        MB3_ {
            bindings = <&mkp MB3>;
            key-positions = <20 18>;
            timeout-ms = <100>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        TAPDANCE_behavior: TAPDANCE_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&lt 2 INTERNATIONAL_5>, <&kp INTERNATIONAL_4>;
        };

        mkt: mkt {
            compatible = "zmk,behavior-hold-tap";
            label = "MKT";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R          &kp T                                                     &kp Y        &kp U    &kp I         &kp O    &kp P
&kp A      &kp S         &kp D         &lt 3 F        &kp G          &mkp MB3                  &kp DELETE       &kp H        &lt 7 J  &kp K         &kp L    &lt 5 MINUS
&kp Z      &kp X         &kp C         &kp V          &kp B          &lt 5 ESCAPE              &kp JP_AMPS      &kp N        &kp M    &kp JP_COMMA  &kp DOT  &mt LCTRL JP_UNDER
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 JP_MHEN  &lt 8 JP_HENK  &mt LEFT_SHIFT SPACE      &lt 1 BACKSPACE  &lt 7 ENTER                                  &mt LCTRL TAB
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        KIGOU {
            bindings = <
&kp JP_PRCNT  &kp JP_EQUAL    &kp UP_ARROW    &kp JP_DQT       &kp JP_SQT                                  &kp JP_TILDE  &kp JP_EXCL   &kp JP_ASTRK  &kp JP_LPAR  &kp JP_RPAR
&kp JP_CAPS   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_UP    &trans         &kp JP_SLASH  &kp JP_COMMA  &kp JP_QMARK  &kp JP_COLON  &kp JP_LBKT  &kp JP_RBKT
&kp JP_CARET  &kp JP_DLLR     &kp JP_YEN      &kp JP_HASH      &kp PAGE_DOWN  &trans         &kp JP_EQUAL  &kp DOT       &kp JP_AT     &kp JP_SEMI   &kp JP_LT    &kp JP_RT
&trans        &trans          &trans          &trans           &kp TAB        &kp SPACE      &trans        &trans                                                 &kp JP_PIPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FANCTION {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F12  &kp LS(INSERT)                            &kp LC(Z)      &kp LC(Y)       &kp UP_ARROW    &mkp MB4         &mkp MB5
&kp F4  &kp F5  &kp F6  &kp F11  &kp LC(INSERT)  &trans          &kp HOME  &kp PAGE_UP    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp BACKSPACE
&kp F7  &kp F8  &kp F9  &kp F10  &trans          &kp ESCAPE      &kp END   &kp PAGE_DOWN  &kp DELETE      &trans          &trans           &kp LEFT_CONTROL
&trans  &trans  &trans  &trans   &kp TAB         &kp SPACE       &trans    &trans                                                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM3 {
            bindings = <
&trans  &trans          &kp UP_ARROW    &kp JP_SLASH     &kp JP_COLON                             &kp N7  &kp N8  &kp N9  &kp JP_ASTRK  &kp JP_PLUS
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp JP_EQUAL  &trans      &kp DELETE     &kp N4  &kp N5  &kp N6  &kp JP_SLASH  &kp JP_MINUS
&trans  &kp JP_PRCNT    &kp JP_HASH     &kp JP_LPAR      &kp JP_RPAR   &trans      &kp ENTER      &kp N1  &kp N2  &kp N3  &kp JP_DOT    &kp JP_UNDER
&trans  &trans          &trans          &trans           &trans        &trans      &kp BACKSPACE  &kp N0                                &kp JP_EQUAL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                    &trans  &trans               &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans                &trans  &mkp MB1             &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans                &trans  &kp LG(RIGHT_ARROW)  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mt LEFT_SHIFT SPACE  &trans                                           &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans          &kp UP_ARROW    &trans           &trans                      &trans  &trans    &trans            &trans    &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &mkp MB1  &kp LEFT_CONTROL  &mkp MB2  &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans  &trans    &trans            &trans    &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                                        &trans
            >;
        };

        SC {
            bindings = <
&kp PRINTSCREEN  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(INSERT)  &kp LS(INSERT)                                        &kp LC(Y)           &kp LC(U)            &kp UP_ARROW                 &trans           &kp PAGE_UP
&kp LC(A)        &kp LC(S)        &trans             &kp LC(F)       &kp LC(G)       &trans            &kp DELETE          &kp LG(UP_ARROW)    &kp LEFT_ARROW       &kp DOWN_ARROW               &kp RIGHT_ARROW  &kp PAGE_DOWN
&kp LC(Z)        &kp LC(X)        &kp LC(C)          &kp LC(V)       &kp LC(B)       &kp LEFT_WIN      &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &kp LC(LA(LS(PRINTSCREEN)))  &kp PRINTSCREEN  &trans
&trans           &kp LS(JP_EISU)  &kp LC(LSHIFT)     &kp LSHIFT      &kp SPACE       &trans            &kp BACKSPACE       &kp ENTER                                                                              &trans
            >;
        };

        FUNCTION2 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F12  &kp LS(INSERT)                                      &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &mkp MB3
&kp F4  &kp F5  &kp F6  &kp F11  &kp LC(INSERT)  &trans                    &kp HOME  &kp PAGE_UP         &mkp MB1            &kp UP_ARROW      &mkp MB2             &mkp MB4
&kp F7  &kp F8  &kp F9  &kp F10  &kp INSERT      &trans                    &kp END   &kp PAGE_DOWN       &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &mkp MB5
&trans  &trans  &trans  &trans   &trans          &mt LEFT_SHIFT SPACE      &trans    &trans                                                                         &trans
            >;
        };

        SC2 {
            bindings = <
&kp PRINTSCREEN  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(INSERT)   &kp LS(INSERT)                                 &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &mkp MB3
&kp LC(A)        &kp LC(S)        &trans             &kp LC(F)        &kp LC(G)       &trans          &kp DELETE     &kp PAGE_UP         &mkp MB1            &kp UP_ARROW      &mkp MB2             &kp LC(PAGE_UP)
&kp LC(Z)        &kp LC(X)        &kp LC(C)          &kp LC(V)        &kp LC(LSHIFT)  &kp LSHIFT      &kp LEFT_WIN   &kp PAGE_DOWN       &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp LC(PAGE_DOWN)
&trans           &trans           &kp LA(TAB)        &kp LS(JP_EISU)  &trans          &kp LSHIFT      &kp BACKSPACE  &kp ENTER                                                                      &trans
            >;
        };
    };
};
