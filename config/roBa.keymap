#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// スクロール量定義

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    hold-while-undecided;
};

&lt { hold-while-undecided; };

//AML誤爆防止・復帰除外キー設定

&zip_temp_layer {
    require-prior-idle-ms = <100>;
    excluded-positions = <
        18 // J
        19 // K
        20 // L
        39 // Shift
    >;
};

//トラックボール操作時AML動作定義

&trackball_listener { input-processors = <&zip_temp_layer 4 500>; };

//マウスクリック操作時AML動作定義

&mkp_input_listener { input-processors = <&zip_temp_layer 4 250>; };

&trackball {
    //  automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        kana {
            bindings = <&kp JP_ZKHK>;
            key-positions = <34 38>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        TAPDANCE_behavior: TAPDANCE_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&lt 2 INTERNATIONAL_5>, <&kp INTERNATIONAL_4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                   &kp T                                            &kp Y        &kp U  &kp I     &kp O     &kp P
&kp A      &kp S         &kp D         &kp F                   &kp G        &mkp MB3           &kp DELETE       &kp H        &kp J  &kp K     &kp L     &kp MINUS
&kp Z      &kp X         &kp C         &kp V                   &kp B        &lt 5 ESCAPE       &kp DOT          &kp N        &kp M  &mkp MB1  &mkp MB2  &lt 5 JP_COMMA
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_SHIFT JP_MHEN  &lt 3 SPACE  &lt 6 JP_HENK      &lt 2 BACKSPACE  &lt 4 ENTER                             &mt LCTRL TAB
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        KIGOU1 {
            bindings = <
&kp JP_PRCNT  &kp JP_EQUAL    &kp UP_ARROW    &kp JP_DQT       &kp JP_SQT                               &kp JP_TILDE  &kp JP_EXCL   &kp JP_SEMI   &kp JP_LPAR  &kp JP_RPAR
&kp JP_CAPS   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_UP    &trans      &kp JP_UNDER  &kp JP_COMMA  &kp JP_QMARK  &kp JP_COLON  &kp JP_LBKT  &kp JP_RBKT
&kp JP_CARET  &kp JP_DLLR     &kp JP_YEN      &kp JP_HASH      &kp PAGE_DOWN  &trans      &kp JP_AMPS   &kp DOT       &kp JP_AT     &kp JP_SLASH  &kp JP_LT    &kp JP_RT
&trans        &trans          &trans          &trans           &kp SPACE      &trans      &trans        &trans                                                 &kp JP_PIPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FANCTION2 {
            bindings = <
&trans  &trans          &kp UP_ARROW    &trans           &trans                                         &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP      &trans          &kp LS(INSERT)  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans          &trans          &trans           &kp PAGE_DOWN  &kp DELETE      &kp LC(INSERT)  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans          &trans          &trans           &kp SPACE      &trans          &trans          &trans                           &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM3 {
            bindings = <
&trans  &trans          &kp UP_ARROW    &trans           &kp JP_COLON                             &kp N7  &kp N8  &kp N9  &kp JP_ASTRK  &kp JP_PLUS
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp JP_EQUAL  &trans      &kp DELETE     &kp N4  &kp N5  &kp N6  &kp JP_SLASH  &kp JP_MINUS
&trans  &kp JP_PRCNT    &kp JP_HASH     &kp JP_LPAR      &kp JP_RPAR   &trans      &kp ENTER      &kp N1  &kp N2  &kp N3  &kp JP_DOT    &kp JP_EQUAL
&trans  &trans          &trans          &trans           &trans        &trans      &kp BACKSPACE  &kp N0                                &kp JP_SLASH
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&kp LS(SQT)  &kp N7  &kp N8  &kp N9     &kp LS(SEMI)                                   &kp LC(Z)      &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp LC(Y)
&kp SLASH    &kp N4  &kp N5  &kp N6     &kp MINUS      &trans              &kp COMMA   &kp PAGE_UP    &mkp LCLK       &kp DOWN_ARROW  &mkp RCLK        &kp LEFT_SHIFT
&kp INT_YEN  &kp N1  &kp N2  &kp N3     &kp LS(MINUS)  &kp DOLLAR          &kp PERIOD  &kp PAGE_DOWN  &kp HOME        &kp END         &mkp MB4         &kp LEFT_CONTROL
&trans       &kp N0  &trans  &kp LCTRL  &kp TAB        &kp LEFT_SHIFT      &trans      &trans                                                          &mkp MB5
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans          &kp UP_ARROW    &trans           &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SC {
            bindings = <
&kp PRINTSCREEN     &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(INSERT)  &kp LS(INSERT)                                      &kp LC(Y)           &kp LC(U)            &kp UP_ARROW    &trans           &kp PAGE_UP
&kp LC(A)           &kp LC(S)        &trans             &kp LC(F)       &kp LC(G)       &trans          &kp DELETE          &kp LG(UP_ARROW)    &kp LEFT_ARROW       &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN
&kp LC(Z)           &kp LC(X)        &kp LC(C)          &kp LC(V)       &kp LC(B)       &kp ESCAPE      &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &mkp MB1        &mkp MB2         &mkp MB3
&TAPDANCE_behavior  &kp LS(JP_EISU)  &kp LC(LSHIFT)     &kp LSHIFT      &kp SPACE       &trans          &kp BACKSPACE       &kp ENTER                                                                 &trans
            >;
        };

        layer_7 {
            bindings = <
&kp LS(SQT)  &kp N7  &kp N8  &kp N9     &kp LS(SEMI)                                   &kp LC(Z)      &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp LC(Y)
&kp SLASH    &kp N4  &kp N5  &kp N6     &kp MINUS      &trans              &kp COMMA   &kp PAGE_UP    &mkp LCLK       &kp DOWN_ARROW  &mkp RCLK        &kp LEFT_SHIFT
&kp INT_YEN  &kp N1  &kp N2  &kp N3     &kp LS(MINUS)  &kp DOLLAR          &kp PERIOD  &kp PAGE_DOWN  &kp HOME        &kp END         &mkp MB4         &kp LEFT_CONTROL
&trans       &kp N0  &trans  &kp LCTRL  &kp TAB        &kp LEFT_SHIFT      &trans      &trans                                                          &mkp MB5
            >;
        };
    };
};
