#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// スクロール量定義

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt { hold-while-undecided; };

//AML誤爆防止・復帰除外キー設定

&zip_temp_layer {
    require-prior-idle-ms = <100>;
    excluded-positions = <
        18 // J
       // 19  K
        20 // L
       // 21 // 
       // 25 // V
       //  28 //
       //  29 //
       //  30 //
       //  37 // 左下左
       //  38 // 左下中
         39 // 左下右
    >;
};

//トラックボール操作時AML動作定義

&trackball_listener { input-processors = <&zip_temp_layer 4 30080>; };

//マウスクリック操作時AML動作定義

&mkp_input_listener { input-processors = <&zip_temp_layer 4 500>; };

&trackball {
    //  automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        F7_ {
            bindings = <&kp F7>;
            key-positions = <38 22>;
            timeout-ms = <30>;
        };

        F8_ {
            bindings = <&kp F8>;
            key-positions = <38 23>;
            timeout-ms = <30>;
        };

        F9_ {
            bindings = <&kp F9>;
            key-positions = <38 24>;
            timeout-ms = <30>;
        };

        F10_ {
            bindings = <&kp F10>;
            key-positions = <38 25>;
            timeout-ms = <30>;
        };

        F6_ {
            bindings = <&kp F6>;
            key-positions = <38 12>;
        };

        F5_ {
            bindings = <&kp F5>;
            key-positions = <38 11>;
        };

        F4_ {
            bindings = <&kp F4>;
            key-positions = <38 10>;
        };

        F3_ {
            bindings = <&kp F3>;
            key-positions = <38 2>;
        };

        F2_ {
            bindings = <&kp F2>;
            key-positions = <38 1>;
        };

        F1_ {
            bindings = <&kp F1>;
            key-positions = <38 0>;
        };

        F11_ {
            bindings = <&kp F11>;
            key-positions = <38 13>;
        };

        F12_ {
            bindings = <&kp F12>;
            key-positions = <38 3>;
        };

        KAKKO1 {
            bindings = <&kakko1>;
            key-positions = <14 17>;
        };

        KAKKO2 {
            bindings = <&kakko2>;
            key-positions = <4 5>;
        };

        KAKKO3 {
            bindings = <&kakko3>;
            key-positions = <26 29>;
        };

        KAKKO11 {
            bindings = <&kakko11>;
            key-positions = <13 18>;
        };

        EXCL_ {
            bindings = <&kp JP_EXCL>;
            key-positions = <3 2>;
        };

        QMARK_ {
            bindings = <&kp JP_QMARK>;
            key-positions = <7 6>;
        };

        AT_ {
            bindings = <&kp JP_AT>;
            key-positions = <30 32>;
        };

        COLON_ {
            bindings = <&kp JP_COLON>;
            key-positions = <25 26>;
        };

        SEMI_ {
            bindings = <&kp JP_SEMI>;
            key-positions = <30 29>;
        };

        MB1_ {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        MB2_ {
            bindings = <&mkp MB2>;
            key-positions = <20 19>;
        };

        ESC_ {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        UNDERBAR_ {
            bindings = <&kp JP_UNDER>;
            key-positions = <20 21>;
        };

        DEL_ {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        MB3_ {
            bindings = <&mkp MB3>;
            key-positions = <18 20>;
        };

        AND_ {
            bindings = <&kp JP_AMPS>;
            key-positions = <25 12>;
        };

        MUHENKAN {
            bindings = <&kp JP_MHEN>;
            key-positions = <13 12>;
        };

        COMMA_ {
            bindings = <&kp JP_COMMA>;
            key-positions = <25 24>;
        };

        DOT_ {
            bindings = <&kp JP_DOT>;
            key-positions = <30 31>;
        };

        EQ_ {
            bindings = <&kp JP_EQUAL>;
            key-positions = <30 19>;
        };

        WCLICK_ {
            bindings = <&WCLICK_>;
            key-positions = <18 19 20>;
        };

        MUHENKAN2_ {
            bindings = <&kp JP_MHEN>;
            key-positions = <31 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        kakko1: kakko1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_LPAR &kp JP_RPAR &kp LEFT>;
            label = "KAKKO1";
        };

        kakko2: kakko2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_LBKT &kp JP_RBKT &kp LEFT_ARROW>;
            label = "KAKKO2";
        };

        kakko3: kakko3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_LT &kp JP_RT &kp LEFT_ARROW>;
            label = "KAKKO3";
        };

        kakko11: kakko11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp JP_EQUAL &kp JP_LPAR &kp JP_RPAR &kp LEFT &kp LEFT>;
            label = "KAKKO11";
        };

        WCLICK_: WCLICK_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1>;
            label = "WCLICK_";
        };

        MHEM_NUM: MHEM_NUM {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(INT_MUHENKAN) &mo 3>;
            label = "MHEM_NUM";
        };

        HEMKAN_NUM_: HEMKAN_NUM_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(INT_HENKAN) &mo 3>;
            label = "HEMKAN_NUM_";
        };

        MHEN_KIGOU_: MHEN_KIGOU {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(INT_MUHENKAN) &mo 1>;
            label = "MHEN_KIGOU";
        };

        HENKAN_KIGOU_: HENKAN_KIGOU_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(INT_HENKAN) &mo 1>;
            label = "HENKAN_KIGOU_";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        TAPDANCE1: TAPDANCE1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE1";
            #binding-cells = <0>;
            bindings = <&lt 8 JP_HENK>, <&mt LEFT_SHIFT JP_MHEN>;
        };

        mkt: mkt {
            compatible = "zmk,behavior-hold-tap";
            label = "MKT";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q   &kp W           &kp E        &kp R             &kp T                                                      &kp Y           &kp U             &kp I              &kp O             &kp P
&kp A   &lt 2 S         &lt 1 D      &lt 3 F           &kp G           &trans                    &trans           &kp H           &kp J             &lt 5 K            &kp L             &lt 5 JP_MINUS
&kp Z   &mt LEFT_WIN X  &mt LCTRL C  &mt LEFT_SHIFT V  &mt LEFT_ALT B  &trans                    &trans           &mt LEFT_ALT N  &mt LEFT_SHIFT M  &mt LCTRL JP_HENK  &mt LEFT_WIN TAB  &kp DELETE
&trans  &trans          &trans       &trans            &lt 8 JP_HENK   &mt LEFT_SHIFT SPACE      &lt 2 BACKSPACE  &lt 7 ENTER                                                            &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        KIGOU {
            bindings = <
&trans  &trans  &trans  &kp JP_LBKT  &kp JP_RBKT                             &kp JP_ASTRK  &trans        &kp JP_YEN   &kp JP_SQT  &kp JP_PIPE
&trans  &trans  &trans  &kp JP_LPAR  &kp JP_RPAR  &trans      &trans         &kp JP_SLASH  &kp JP_HASH   &kp JP_DLLR  &kp JP_DQT  &kp JP_TILDE
&trans  &trans  &trans  &kp JP_LT    &kp JP_RT    &trans      &trans         &kp JP_CARET  &kp JP_PRCNT  &trans       &trans      &kp DELETE
&trans  &trans  &trans  &trans       &kp JP_MHEN  &trans      &kp BACKSPACE  &trans                                               &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM1 {
            bindings = <
&trans  &trans  &trans       &trans  &trans                                              &kp JP_ASTRK  &kp N7  &kp N8  &kp N9  &kp N0
&trans  &trans  &kp JP_MHEN  &trans  &trans           &trans              &trans         &kp JP_SLASH  &kp N4  &kp N5  &kp N6  &kp JP_MINUS
&trans  &trans  &trans       &trans  &kp LS(JP_EISU)  &trans              &trans         &kp N0        &kp N1  &kp N2  &kp N3  &kp JP_PLUS
&trans  &trans  &trans       &trans  &kp JP_MHEN      &kp LEFT_SHIFT      &kp BACKSPACE  &kp ENTER                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                              &kp JP_ASTRK  &kp N7  &kp N8  &kp N9  &kp N0
&trans  &trans  &trans  &trans  &trans           &trans              &trans         &kp JP_SLASH  &kp N4  &kp N5  &kp N6  &kp JP_MINUS
&trans  &trans  &trans  &trans  &kp LS(JP_EISU)  &trans              &trans         &kp JP_DOT    &kp N1  &kp N2  &kp N3  &kp JP_PLUS
&trans  &trans  &trans  &trans  &kp JP_MHEN      &kp LEFT_SHIFT      &kp BACKSPACE  &kp N0                                &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans               &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1             &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LG(RIGHT_ARROW)  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                         &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans          &kp UP_ARROW    &trans           &trans                      &trans  &trans            &trans  &trans            &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &kp LEFT_CONTROL  &trans  &kp LEFT_CONTROL  &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans  &trans            &trans  &trans            &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                                              &trans
            >;
        };

        SC {
            bindings = <
&kp PRINTSCREEN  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(INSERT)  &kp LS(INSERT)                                        &kp LC(Y)           &kp LC(U)            &kp UP_ARROW                 &trans           &kp PAGE_UP
&kp LC(A)        &kp LC(S)        &trans             &kp LC(F)       &kp LC(G)       &trans            &kp DELETE          &kp LG(UP_ARROW)    &kp LEFT_ARROW       &kp DOWN_ARROW               &kp RIGHT_ARROW  &kp PAGE_DOWN
&kp LC(Z)        &kp LC(X)        &kp LC(C)          &kp LC(V)       &kp LC(B)       &kp LEFT_WIN      &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &kp LC(LA(LS(PRINTSCREEN)))  &kp PRINTSCREEN  &trans
&trans           &kp LS(JP_EISU)  &kp LC(LSHIFT)     &kp LSHIFT      &kp SPACE       &trans            &kp BACKSPACE       &kp ENTER                                                                              &trans
            >;
        };

        FUNCTION2 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F12  &kp LS(INSERT)                           &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &mkp MB3
&kp F4  &kp F5  &kp F6  &kp F11  &kp LC(INSERT)  &trans         &kp HOME  &kp PAGE_UP         &mkp MB1            &kp UP_ARROW      &mkp MB2             &mkp MB4
&kp F7  &kp F8  &kp F9  &kp F10  &kp INSERT      &trans         &kp END   &kp PAGE_DOWN       &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &mkp MB5
&trans  &trans  &trans  &trans   &trans          &kp SPACE      &trans    &trans                                                                         &trans
            >;
        };

        SC2 {
            bindings = <
&kp PRINTSCREEN  &kp LC(W)  &kp INSERT     &kp LC(INSERT)   &kp LS(INSERT)                                      &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &mkp MB3
&kp LC(A)        &kp LC(S)  &kp LS(LC(V))  &kp LC(F)        &kp LCTRL       &trans               &kp DELETE     &kp PAGE_UP         &mkp MB1            &kp UP_ARROW      &mkp MB2             &lt 5 LC(PAGE_UP)
&kp LC(Z)        &kp LC(X)  &kp LC(C)      &kp LC(V)        &kp LSHIFT      &kp LSHIFT           &kp LEFT_WIN   &kp PAGE_DOWN       &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp LC(PAGE_DOWN)
&trans           &trans     &kp LA(TAB)    &kp LS(JP_EISU)  &trans          &kp LS(JP_EISU)      &kp BACKSPACE  &kp LEFT_SHIFT                                                                 &trans
            >;
        };
    };
};
